version: '2.1'
services:
  catalog:
    image: catalog:0.0.1-snapshot
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT: "8888"
    ports:
      - "8086:8086"
    depends_on:
      logstash:
        condition: service_healthy
      database-catalog:  # Ensure the webapp service starts after the database
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  database-catalog:
    image: postgres:latest
    environment:
      POSTGRES_DB: catalog-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"  # Map host port 5432 to container port 5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  order:
    image: order:0.0.1-snapshot
    environment:
      PROFILE: "dev"
    ports:
      - "8081:8081"
    depends_on:
      logstash:
        condition: service_healthy
      database-order:  # Ensure the webapp service starts after the database
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  database-order:
    image: postgres:latest
    environment:
      POSTGRES_DB: order-db  # Replace with your desired database name
      POSTGRES_USER: postgres  # Replace with your desired database user
      POSTGRES_PASSWORD: postgres  # Replace with your desired database password
    ports:
      - "5433:5432"  # Map host port 5432 to container port 5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  cart-item:
    image: cart-item:0.0.1-snapshot
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT: "8888"
    ports:
      - "8082:8082"
    depends_on:
      logstash:
        condition: service_healthy
      database-cart-item:  # Ensure the webapp service starts after the database
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
  database-cart-item:
    image: postgres:latest
    environment:
      POSTGRES_DB: cart-item-db  # Replace with your desired database name
      POSTGRES_USER: postgres  # Replace with your desired database user
      POSTGRES_PASSWORD: postgres  # Replace with your desired database password
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  configserver:
    image: configserver:0.0.1-snapshot
    ports:
      - "8888:8888"
    environment:
      SERVER_PORT: 8888
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:8888/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

  eureka-server:
    image: eureka-server:0.0.1-snapshot
    ports:
      - "8070:8070"
    depends_on:
      logstash:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server"
    command: java -jar /app/eureka-server-0.0.1-snapshot.jar --spring.config.name=eureka-server
  eureka-server-instance-2:
    image: eureka-server:0.0.1-snapshot
    ports:
      - "8072:8072"
    depends_on:
      logstash:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server-instance-2"
    environment:
      - SPRING_PROFILES_ACTIVE=instance-2
    command: java -jar /app/eureka-server-0.0.1-snapshot.jar --spring.config.name=eureka-server-instance-2

  gateway-server:
    image: gateway-server:0.0.1-snapshot
    ports:
      - "8075:8075"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8075"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eureka-server-instance-2:8072/eureka/"
      EUREKASERVER_PORT: "8072"
      CONFIGSERVER_PORT: "8888"
    depends_on:
#      database:
#        condition: service_healthy
      logstash:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"
#  keycloak:
##    image: mihaibob/keycloak:18.0.2-legacy
#    image: jboss/keycloak
#    restart: always
#    environment:
#      KEYCLOAK_VERSION: 6.0.1
#      KEYCLOAK_USER: admin
#      KEYCLOAK_PASSWORD: admin
#      DB_VENDOR: h2
#    volumes:
#      - ./realm-export.json:/opt/jboss/keycloak/realm-export.json
#    command:
#      - "-b 0.0.0.0"
#      - "-Dkeycloak.import=/opt/jboss/keycloak/realm-export.json"
#      - "-Dkeycloak.profile.feature.scripts=enabled"
#      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
#    ports:
#      - "8080:8080"
#    networks:
#      backend:
#        aliases:
#          - "keycloak"

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    container_name: redis
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"
    healthcheck:
      test: bin/logstash -t
      interval: 60s
      timeout: 50s
      retries: 5
    depends_on:
      - elasticsearch
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"

networks:
  backend:
    driver: bridge
volumes:
  esdata1:
    driver: local