version: '3'
services:
  catalog:
    image: catalog:0.0.1-snapshot
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT: "8888"
    ports:
      - "8080:8080"
    depends_on:
      database-catalog:  # Ensure the webapp service starts after the database
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  database-catalog:
    image: postgres:latest
    environment:
      POSTGRES_DB: catalog-db  # Replace with your desired database name
      POSTGRES_USER: postgres  # Replace with your desired database user
      POSTGRES_PASSWORD: postgres  # Replace with your desired database password
    ports:
      - "5432:5432"  # Map host port 5432 to container port 5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  order:
    image: order:0.0.1-snapshot
    environment:
      PROFILE: "dev"
    ports:
      - "8081:8081"
    depends_on:
      database-order:  # Ensure the webapp service starts after the database
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  database-order:
    image: postgres:latest
    environment:
      POSTGRES_DB: order-db  # Replace with your desired database name
      POSTGRES_USER: postgres  # Replace with your desired database user
      POSTGRES_PASSWORD: postgres  # Replace with your desired database password
    ports:
      - "5433:5432"  # Map host port 5432 to container port 5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  cart-item:
    image: cart-item:0.0.1-snapshot
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8888"
      CONFIGSERVER_PORT: "8888"
    ports:
      - "8082:8082"
    depends_on:
      database-cart-item:  # Ensure the webapp service starts after the database
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
  database-cart-item:
    image: postgres:latest
    environment:
      POSTGRES_DB: cart-item-db  # Replace with your desired database name
      POSTGRES_USER: postgres  # Replace with your desired database user
      POSTGRES_PASSWORD: postgres  # Replace with your desired database password
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  configserver:
    image: configserver:0.0.1-snapshot
    ports:
      - "8888:8888"
    environment:
      SERVER_PORT: 8888
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:8888/actuator/health" ]
      interval: 10s
      timeout: 10s
      retries: 5

  eureka-server:
    image: eureka-server:0.0.1-snapshot
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server"
    command: java -jar /app/eureka-server-0.0.1-snapshot.jar --spring.config.name=eureka-server
  eureka-server-instance-2:
    image: eureka-server:0.0.1-snapshot
    ports:
      - "8072:8072"
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eureka-server-instance-2"
    environment:
      - SPRING_PROFILES_ACTIVE=instance-2
    command: java -jar /app/eureka-server-0.0.1-snapshot.jar --spring.config.name=eureka-server-instance-2
networks:
  backend:
    driver: bridge